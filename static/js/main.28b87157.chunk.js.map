{"version":3,"sources":["components/Header.js","redux/ActionTypes.js","redux/settingActions.js","components/Tile.js","components/Board.js","components/Scoreboard.js","math/MathUtilities.js","components/FittsDisplay.js","components/StatChart.js","components/FittsReport.js","components/AppContainer.js","App.js","reportWebVitals.js","classes/ClickEntry.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Header","Component","INCREMENT_SCORE","INCREASE_FITTS_SCORE","PICK_A_NEW_HIGHLIGHT","UPDATE_PREV_X_Y_COORD","RESET_GAME","SET_TIME","END_GAME","SET_REGRESSION_MODEL","SET_CHART_DATA","SET_AVERAGE_INDEX_OF_PERFORMANCE","SET_NUM_HIGHLIGHTS","LOAD_IN_PREMADE_ENTRIES","TOGGLE_BORDERS","endGame","type","ActionTypes","resetGame","Tile","this","props","highlightedTiles","includes","id","e","isHighlighted","document","getElementById","innerHTML","incrementScore","updatePrevXYCoord","clientX","clientY","pickANewHighlight","el","centerX","getBoundingClientRect","x","width","centerY","y","height","a","prevX","b","prevY","distance","Math","sqrt","log","prediction","RegressionModel","predict","toFixed","className","ref","calculateID","style","backgroundColor","border","Borders","onClick","_handleClick","connect","state","ownProps","dispatch","tileToBeReplaced","Exception","X","Y","Board","i","board","Scoreboard","countdown","time","score","setTime","clicker","setInterval","clearInterval","Time","getIndexOfDifficulty","clickEntry","calculateMeanMovementPerId","clickEntries","idMeanDict","countDict","length","idOfEntry","Object","entries","forEach","key","value","round","calculateLinearRegression","keys","push","parseFloat","SimpleLinearRegression","FittsDisplay","fullDisplay","data-field","totalClickEntries","currentClickEntries","map","entry","predictedTime","regressionModel","MathUtilities","StatChart","console","chartType","loader","data","ChartData","options","title","hAxis","vAxis","legend","seriesType","series","1","FittsReport","needsRefresh","updateData","setState","setRegressionModel","setChartData","regression","setAvgIndexOfPerformance","sum","signalRefreshed","toString","avgIP","loadInPremadeEntries","demandRefresh","AvgIP","model","Model","Data","avg","Avg","AppContainer","GameOver","offLabel","onChange","toggleBorders","target","checked","onLabel","bool","Status","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ClickEntry","initState","prevTimeStamp","fittsScore","NumHighlights","pickANewTile","randomNumber","floor","random","rootReducer","action","newHighlights","slice","indexOf","Amount","currentTime","Date","now","timeDiff","newHighlightedTiles","Num","newEntries","j","PremadeEntries","createStore","composeWithDevTools","ReactDOM","render","store"],"mappings":"ywLAEqBA,E,4JACjB,WACI,OACI,8BACI,uD,GAJoBC,a,QCFvBC,EAAkB,kBAElBC,EAAuB,uBAEvBC,EAAuB,uBAIvBC,EAAwB,wBAExBC,EAAa,aAEbC,EAAW,WAEXC,EAAW,WAEXC,EAAuB,uBAEvBC,EAAiB,iBAEjBC,EAAmC,mCAEnCC,EAAqB,qBAErBC,EAA0B,0BAE1BC,EAAiB,iBCWjBC,EAAU,WACnB,MAAO,CACHC,KAAOC,IAIFC,EAAY,WACrB,MAAO,CACHF,KAAOC,ICzCTE,E,mKACF,WACI,OAAOC,KAAKC,MAAMC,iBAAiBC,SAASH,KAAKC,MAAMG,M,0BAG3D,SAAaC,GACNL,KAAKM,iBACJC,SAASC,eAAe,QAAQR,KAAKC,MAAMG,IAAIK,UAAY,GAC3DT,KAAKC,MAAMS,iBACXV,KAAKC,MAAMU,kBAAkBN,EAAEO,QAASP,EAAEQ,SAC1Cb,KAAKC,MAAMa,kBAAkBd,KAAKC,MAAMG,KAExCJ,KAAKC,MAAMN,Y,yBAInB,SAAYoB,GAGR,IAAIC,EAAUD,EAAGE,wBAAwBC,EAAKH,EAAGE,wBAAwBE,MAAM,EAC3EC,EAAUL,EAAGE,wBAAwBI,EAAKN,EAAGE,wBAAwBK,OAAO,EAC5EC,EAAIP,EAAUhB,KAAKC,MAAMuB,MACzBC,EAAIL,EAAUpB,KAAKC,MAAMyB,MACzBC,EAAWC,KAAKC,KAAKN,EAAEA,EAAGE,EAAEA,GAC5BrB,EAAKwB,KAAKE,IAAK,EAAEH,EAAY,KAC7BvB,EAAK,IACLA,EAAK,GAET,IAAI2B,EAAa/B,KAAKC,MAAM+B,gBAAgBC,QAAQ7B,GAAI8B,QAAQ,GAChE3B,SAASC,eAAe,QAAQR,KAAKC,MAAMG,IAAIK,UAAYsB,EAAW,O,oBAG1E,WAAU,IAAD,OACL,OACI,qBAAKI,UAAU,OACf/B,GAAI,QAAQJ,KAAKC,MAAMG,GACvBgC,IAAK,SAAArB,GACD,GAAI,EAAKT,gBAAiB,CACtB,IAAKS,EACD,OAEkC,MAA9B,EAAKd,MAAM+B,iBACX,EAAKK,YAAYtB,KAKjCuB,MAAO,CAACC,gBAAkBvC,KAAKM,gBAAkB,QAAU,QAASkC,OAASxC,KAAKC,MAAMwC,QAAU,kBAAoB,IACtHC,QAAS,SAACrC,GAAD,OAAO,EAAKsC,aAAatC,U,GAhD3BxB,aAkFJ+D,eAVS,SAACC,EAAOC,GAC5B,MAAO,CACH5C,iBAAmB2C,EAAM3C,iBACzB8B,gBAAkBa,EAAMb,gBACxBR,MAAQqB,EAAMrB,MACdE,MAAQmB,EAAMnB,MACde,QAAUI,EAAMJ,YAtBG,SAACM,GACxB,MAAO,CACHjC,kBAAoB,SAACkC,GACjBD,EDtDD,CACHnD,KAAOC,EACPoD,UCoD+BD,KAE/BtC,eAAiB,WACbqC,ED/DD,CACHnD,KAAOC,KCgEPc,kBAAoB,SAACO,EAAEG,GACnB0B,ED/CqB,SAAC7B,EAAGG,GACjC,MAAO,CACHzB,KAAOC,EACPqD,EAAIhC,EACJiC,EAAI9B,GC2CSV,CAAkBO,EAAEG,KAEjC1B,QAAU,WACNoD,EAASpD,SAcNiD,CAA6C7C,G,OChFtDqD,E,uKACF,WACIpD,KAAKC,MAAMH,c,oBAGf,WACI,IAAIuD,EAAI,EACR,OACI,sBAAKlB,UAAU,QAAf,UACI,eAAC,MAAD,WACI,cAAC,MAAD,UAAK,cAAC,EAAD,CAAM/B,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,WAEnB,eAAC,MAAD,WACI,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,WAEnB,eAAC,MAAD,WACI,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,WAEnB,eAAC,MAAD,WACI,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,QACf,cAAC,MAAD,UAAK,cAAC,EAAD,CAAMjD,GAAIiD,kB,GAvEfxE,aA4FL+D,eANS,SAACC,EAAOC,GAC5B,MAAO,CACHQ,MAAQT,EAAMO,UATK,SAACL,GACxB,MAAO,CACHjD,UAAY,WACRiD,EAASjD,SAUN8C,CAA6CQ,GC9FtDG,E,4MACFC,UAAY,WACgB,IAApB,EAAKvD,MAAMwD,MACX,EAAKxD,MAAMN,UAEX,EAAKM,MAAMyD,MAAQ,GACnB,EAAKzD,MAAM0D,QAAQ,EAAK1D,MAAMwD,KAAK,I,uDAI3C,WACIzD,KAAK4D,QAAUC,YAAY7D,KAAKwD,UAAW,O,kCAG/C,WACIM,cAAc9D,KAAK4D,W,oBAGvB,WACI,OAAyB,IAArB5D,KAAKC,MAAMyD,MAEP,sBAAKvB,UAAU,iBAAf,UACA,wDACA,wFAMA,gCACI,0CAAanC,KAAKC,MAAMyD,SACxB,yCAAY1D,KAAKC,MAAMwD,e,GA/BlB5E,aAwDV+D,eAPS,SAACC,EAAOC,GAC5B,MAAO,CACHY,MAAQb,EAAMa,MACdD,KAAOZ,EAAMY,SAdM,SAACV,GACxB,MAAO,CACHY,QAAU,SAACF,GACPV,EHfW,SAACU,GACpB,MAAO,CACH7D,KAAOC,EACPkE,KAAON,GGYME,CAAQF,KAErB9D,QAAU,WACNoD,EAASpD,SAYNiD,CAA6CW,G,gBCvDrD,SAASS,EAAqBC,GACjC,IAAI7D,EAAKwB,KAAKE,IAAK,EAAEmC,EAAWtC,SAJd,KAIuCO,QAAQ,GAIjE,OAHI9B,EAAK,IACLA,EAAK,GAEFA,EAiBJ,SAAS8D,EAA2BC,GAIvC,IAHA,IAAIC,EAAa,GACbC,EAAY,GAEPhB,EAAE,EAAEA,EAAEc,EAAaG,OAAOjB,IAAK,CACpC,IAAIY,EAAaE,EAAad,GAC1BkB,EAAYP,EAAqBC,GACjCM,KAAaH,GACbA,EAAWG,IAAcN,EAAWR,KACpCY,EAAUE,IAAc,IAExBH,EAAWG,GAAaN,EAAWR,KACnCY,EAAUE,GAAa,GAM/B,OAHAC,OAAOC,QAAQL,GAAYM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACjDR,EAAWO,GAAO/C,KAAKiD,MAAMD,EAAQP,EAAUM,OAE5CP,EA0BJ,SAASU,EAA0BX,GAKtC,IAJA,IAAIC,EAAaF,EAA2BC,GACxCjD,EAAI,GACJG,EAAI,GACJ0D,EAAOP,OAAOO,KAAKX,GACdf,EAAE,EAAEA,EAAE0B,EAAKT,OAAOjB,IACvBnC,EAAE8D,KAAKC,WAAWF,EAAK1B,KACvBhC,EAAE2D,KAAKZ,EAAWW,EAAK1B,KAE3B,OAAO,IAAI6B,IAAuBhE,EAAGG,G,IC3EnC8D,E,4JACF,WAAU,IAAD,OACL,OACI,eAAC,QAAD,CAAOhD,UAAWnC,KAAKC,MAAMmF,YAAc,aAAe,GAA1D,UACA,gCACI,+BACA,oBAAIC,aAAW,WAAf,0BAGA,oBAAIA,aAAW,gBAAf,+BAGA,oBAAIA,aAAW,iBAAf,gCAGA,oBAAIA,aAAW,aAAf,kCAKJ,gCACKb,OAAOO,KAAK/E,KAAKC,MAAMmF,YAAcpF,KAAKC,MAAMqF,kBAAoBtF,KAAKC,MAAMsF,qBAAqBC,KAAI,SAACb,GACtG,IAAIc,EAAQ,EAAKxF,MAAMmF,YAAc,EAAKnF,MAAMqF,kBAAkBX,GAAO,EAAK1E,MAAMsF,oBAAoBZ,GACpGe,EAA8C,MAA9B,EAAKzF,MAAM0F,gBAA0B,EAAK1F,MAAM0F,gBAAgB1D,QAAQgD,WAAWW,EAAmCH,KAASvD,QAAQ,GAAK,KAChK,OACI,+BACI,6BACKuD,EAAM9D,WAEX,6BACK8D,EAAMhC,OAEX,6BACsB,MAAjBiC,EAAwB,MAAQA,IAErC,6BACsB,MAAjBA,EAAwB,MAAQD,EAAMhC,KAAOiC,MAX7Cf,e,GAzBN9F,aAuDZ+D,eARS,SAACC,EAAOC,GAC5B,MAAO,CACHyC,oBAAsB1C,EAAM0C,oBAC5BD,kBAAoBzC,EAAMyC,kBAC1BK,gBAAkB9C,EAAMb,mBAIjBY,CAAyBuC,G,QCxDlCU,E,4JACF,WAEI,OADAC,QAAQhE,IAAI,uBAER,cAAC,IAAD,CACEX,MAAO,SACPG,OAAQ,QACRyE,UAAU,aACVC,OAAQ,gDACRC,KAAMjG,KAAKC,MAAMiG,UACjBC,QAAS,CACPC,MAAO,kCACPC,MAAO,CAAED,MAAO,uBAChBE,MAAO,CAAEF,MAAO,iBAChBG,OAAQ,GACRC,WAAY,UACZC,OAAQ,CAAEC,EAAG,CAAC9G,KAAO,gB,GAhBbf,aAkCT+D,eANS,SAACC,EAAOC,GAC5B,MAAO,CACHoD,UAAYrD,EAAMqD,cAPC,SAACnD,GACxB,MAAO,KAUIH,CAA6CiD,GC7BtDc,E,kDACF,WAAY1G,GAAQ,IAAD,8BACf,cAAMA,IACD4C,MAAQ,CACT+D,cAAe,GAHJ,E,qDAOnB,WACI5G,KAAK6G,e,2BAGT,WACI7G,KAAK8G,SAAS,CACVF,cAAe,M,6BAIvB,WACI5G,KAAK8G,SAAS,CACVF,cAAe,M,wBAIvB,WACI5G,KAAKC,MAAM8G,mBAAmBnB,EAAwC5F,KAAKC,MAAMqF,oBACjFtF,KAAKC,MAAM+G,aHaZ,SAA2B7C,GAC9B,IAAIC,EAAaF,EAA2BC,GACxC8C,EAAanC,EAA0BX,GACvC8B,EAAO,GACPlB,EAAOP,OAAOO,KAAKX,GACvB6B,EAAKjB,KAAK,CAAC,sBAAuB,gBAAiB,oBACnD,IAAK,IAAI3B,EAAE,EAAEA,EAAE0B,EAAKT,OAAOjB,IACvB4C,EAAKjB,KAAK,CAACC,WAAWF,EAAK1B,IAAKe,EAAWW,EAAK1B,IAAK4D,EAAWhF,QAAQgD,WAAWF,EAAK1B,OAE5F,OAAO4C,EGtBqBL,CAAgC5F,KAAKC,MAAMqF,oBACnEtF,KAAKC,MAAMiH,yBHjBZ,SAAsC/C,GAEzC,IADA,IAP2BF,EAOvBkD,EAAM,EACD9D,EAAE,EAAEA,EAAEc,EAAaG,OAAOjB,IAC/B8D,GARKnD,EADkBC,EASIE,EAAad,KANZ,KAAlBY,EAAWR,MAQzB,OAAQ0D,EAAIhD,EAAaG,QAAQpC,QAAQ,GGYD0D,CAA2C5F,KAAKC,MAAMqF,sB,oBAI9F,WAAU,IAAD,OAOL,OAJItF,KAAK6C,MAAM+D,eACX5G,KAAK6G,aACL7G,KAAKoH,mBAEmC,IAAxCpH,KAAKC,MAAMqF,kBAAkBhB,OAEzB,sBAAKnC,UAAU,iBAAf,UACI,4EACA,cAAC,SAAD,CAAQO,QAAS,SAACrC,GACd,EAAKJ,MAAMH,aADf,0BAQJ,sBAAKqC,UAAU,iBAAf,UACI,gDACA,oBAAIA,UAAU,iCAAd,uCACA,mBAAGA,UAAU,OAAb,khBAKA,oBAAIA,UAAU,kBAAd,+BACA,cAAC,EAAD,IACA,gCACA,oBAAIA,UAAU,kBAAd,sCACA,4BAAkC,MAA9BnC,KAAKC,MAAM+B,gBAA0B,MAAQhC,KAAKC,MAAM+B,gBAAgBqF,aAC5E,oBAAIlF,UAAU,kBAAd,uDACA,8BAAInC,KAAKC,MAAMqH,MAAf,qBAEA,qBAAInF,UAAU,kBAAd,kCAAsDnC,KAAKC,MAAMqF,kBAAkBhB,OAAnF,OACA,8BAAK,cAAC,EAAD,CAAcc,aAAa,MAChC,cAAC,SAAD,CAAQ1C,QAAS,SAACrC,GACd,EAAKJ,MAAMsH,uBACX,EAAKC,iBAFT,+BAIA,oBAAIrF,UAAU,kBAAd,mBACA,4BAAInC,KAAKC,MAAMyD,QACf,cAAC,SAAD,CAAQhB,QAAS,SAACrC,GAAD,OAAK,EAAKJ,MAAMH,aAAjC,8B,GA1EMjB,aA6GX+D,eATS,SAACC,EAAOC,GAC5B,MAAO,CACHwC,kBAAoBzC,EAAMyC,kBAC1BgC,MAAQzE,EAAM4E,MACdzF,gBAAkBa,EAAMb,gBACxB0B,MAAQb,EAAMa,UAxBK,SAACX,GACxB,MAAO,CACHjD,UAAY,WACRiD,EAASjD,MAEbiH,mBAAqB,SAACW,GAClB3E,EP/CsB,SAAC2E,GAC/B,MAAO,CACH9H,KAAOC,EACP8H,MAAQD,GO4CKX,CAAmBW,KAEhCV,aAAe,SAACf,GACZlD,EP3CgB,SAACkD,GACzB,MAAO,CACHrG,KAAOC,EACP+H,KAAO3B,GOwCMe,CAAaf,KAE1BiB,yBAA2B,SAACW,GACxB9E,EPvC4B,SAAC8E,GACrC,MAAO,CACHjI,KAAOC,EACPiI,IAAMD,GOoCOX,CAAyBW,KAEtCN,qBAAuB,WACnBxE,EPpBD,CACHnD,KAAOC,QOgCA+C,CAA6C+D,GC5GtDoB,E,4JACF,WAAU,IAAD,OACL,OACI,8BACK/H,KAAKC,MAAM+H,SACZ,qBAAK7F,UAAU,iBAAf,SACI,cAAC,EAAD,MAGR,qBAAKA,UAAU,iBAAf,SACK,sBAAKA,UAAU,oBAAf,UACG,cAAC,EAAD,IACA,cAAC,SAAD,CACI/B,GAAG,YACH6H,SAAS,cACTC,SAAU,SAAC7H,GAAD,OAAO,EAAKJ,MAAMkI,cAAc9H,EAAE+H,OAAOC,UACnDC,QAAQ,aACRD,QAASrI,KAAKC,MAAMwC,UAExB,cAAC,EAAD,IACA,cAAC,EAAD,e,GApBO5D,aA2CZ+D,eAPS,SAACC,EAAOC,GAC5B,MAAO,CACHkF,SAAWnF,EAAMmF,SACjBvF,QAAUI,EAAMJ,YAVG,SAACM,GACxB,MAAO,CACHoF,cAAgB,SAACI,GACbxF,ERmCiB,SAACwF,GAC1B,MAAO,CACH3I,KAAOC,EACP2I,OAASD,GQtCIJ,CAAcI,QAWpB3F,CAA6CmF,GC5C7CU,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+BCPOQ,GACjB,WAAYxH,EAAU8B,GAAO,oBACzBzD,KAAK2B,SAAWA,EAChB3B,KAAKyD,KAAOA,G,SCMd2F,GAAY,CAChB1F,MAAQ,EAERlC,OAAS,EAETE,OAAS,EAET2H,eAAiB,EAEjBC,WAAa,EAEbhE,kBAAoB,GAEpBC,oBAAsB,GAEtBrF,iBAAmB,GAEnBuH,MAAQ,EAERhE,KAxBoB,GA0BpBzB,gBAAkB,KAElBuH,cAAgB,EAEhBrD,UAAY,GAEZ8B,UAAW,EAEXvF,SAAU,GAGN+G,GAAe,SAACtG,EAAGhD,GAEvB,IADA,IAAIuJ,EAAe7H,KAAK8H,MApCT,GAoCe9H,KAAK+H,UAAuB,EACnDF,IAAiBvG,GAAKhD,EAAiBC,SAASsJ,IACrDA,EAAe7H,KAAK8H,MAtCP,GAsCa9H,KAAK+H,UAAuB,EAExD,OAAOF,GA6HMG,GAzHK,WAAgC,IAA/B/G,EAA8B,uDAAtBuG,GAAWS,EAAW,uCACjD,OAAQA,EAAOjK,MACb,KAAKC,EACH,OAAoB,IAAhBgD,EAAMa,MACD,2BACFb,GADL,IAEEa,MAAQb,EAAMa,MAAQ,EACtB6B,oBAAsB,MAGhB1C,EAAMa,MAAQ,GAvDA,KAuD+B,EAC9C,2BACFb,GADL,IAEEa,MAAQb,EAAMa,MAAQ,EACtBD,KAAOZ,EAAMY,KA5DD,KA+DP,2BACFZ,GADL,IAEEa,MAAQb,EAAMa,MAAQ,IAI5B,KAAK7D,EACH,IAAIiK,EAAa,sBAAOjH,EAAM3C,iBAAiB6J,MAAM,EAAGlH,EAAM3C,iBAAiB8J,QAAQH,EAAO5G,aAA7E,YACZJ,EAAM3C,iBAAiB6J,MAAMlH,EAAM3C,iBAAiB8J,QAAQH,EAAO5G,WAAW,KACnF,OAAO,2BACFJ,GADL,IAEE3C,iBAAgB,sBAAO4J,GAAP,CAAsBN,GAAaK,EAAO5G,UAAW6G,OAEzE,KAAKjK,EACH,OAAO,2BACFgD,GADL,IAEEyG,WAAazG,EAAMyG,WAAaO,EAAOI,SAE3C,KAAKpK,EAEH,IAAIqK,EAAcC,KAAKC,MACvB,IAA6B,IAAzBvH,EAAMwG,cAAsB,CAC9B,IAAIgB,EAAWH,EAAcrH,EAAMwG,cAC/B9H,EAAIsI,EAAO3G,EAAIL,EAAMrB,MACrBC,EAAIoI,EAAO1G,EAAIN,EAAMnB,MACrBC,EAAWC,KAAKC,KAAKN,EAAEA,EAAGE,EAAEA,GAChC,OAAO,2BACFoB,GADL,IAEEwG,cAAgBa,EAChB3E,oBAAmB,sBAAO1C,EAAM0C,qBAAb,CAAkC,IAAI4D,GAAWxH,EAAU0I,KAC9E7I,MAAQqI,EAAO3G,EACfxB,MAAQmI,EAAO1G,IAGjB,OAAO,2BACFN,GADL,IAEEwG,cAAgBa,EAChB1I,MAAQqI,EAAO3G,EACfxB,MAAQmI,EAAO1G,IAGrB,KAAKtD,EACH,OAAO,2BACFgD,GADL,IAEE4E,MAAQoC,EAAO/B,MAEnB,KAAKjI,EACH,OAAO,2BACFgD,GADL,IAEEY,KAAOoG,EAAO9F,OAElB,KAAKlE,EACH,OAAO,2BACFgD,GADL,IAEEmF,UAAW,EACX1C,kBAAiB,sBAAOzC,EAAMyC,mBAAb,YAAmCzC,EAAM0C,wBAE9D,KAAK1F,EAEH,IADA,IAAIyK,EAAsB,GACjBjH,EAAE,EAAEA,EAAER,EAAM0G,cAAclG,IACjCiH,EAAoBtF,KAAKwE,IAAc,EAAG3G,EAAM3C,mBAElD,OAAO,2BACFkJ,IADL,IAEElJ,iBAAmBoK,EACnBhF,kBAAoBzC,EAAMyC,kBAE1BtD,gBAAkBa,EAAMb,kBAG5B,KAAKnC,EACH,OAAO,2BACFgD,GADL,IAEEb,gBAAkB6H,EAAOlC,QAE7B,KAAK9H,EACH,OAAO,2BACFgD,GADL,IAEEqD,UAAY2D,EAAOjC,OAEvB,KAAK/H,EACH,OAAO,2BACFgD,GADL,IAEE0G,cAAgBM,EAAOU,MAE3B,KAAK1K,EAEH,IADA,IAAI2K,EAAa,GACRC,EAAE,EAAGA,EAAEC,GAAejG,QAAQH,OAAOmG,IAC5CD,EAAWxF,KAAK,IAAImE,GAAWuB,GAAejG,QAAQgG,GAAG9I,SAAU+I,GAAejG,QAAQgG,GAAGhH,OAE/F,OAAO,2BACFZ,GADL,IAEEyC,kBAAiB,UAAOkF,EAAP,YAAsB3H,EAAMyC,sBAEjD,KAAKzF,EACH,OAAO,2BACFgD,GADL,IAEEJ,QAAUoH,EAAOrB,SAErB,QACE,OAAO3F,I,SClKE8H,yBAAYf,GAAagB,kCCKxCC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACE,cAAC,EAAD,MAEFxK,SAASC,eAAe,SAM1BkI,M","file":"static/js/main.28b87157.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Fitts Tile Game</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const INCREMENT_SCORE = \"INCREMENT_SCORE\"\r\n\r\nexport const INCREASE_FITTS_SCORE = \"INCREASE_FITTS_SCORE\"\r\n\r\nexport const PICK_A_NEW_HIGHLIGHT = \"PICK_A_NEW_HIGHLIGHT\"\r\n\r\nexport const PICK_THREE_RANDOM_TILES = \"PICK_THREE_RANDOM_TILES\"\r\n\r\nexport const UPDATE_PREV_X_Y_COORD = \"UPDATE_PREV_X_Y_COORD\"\r\n\r\nexport const RESET_GAME = \"RESET_GAME\"\r\n\r\nexport const SET_TIME = \"SET_TIME\"\r\n\r\nexport const END_GAME = \"END_GAME\"\r\n\r\nexport const SET_REGRESSION_MODEL = \"SET_REGRESSION_MODEL\"\r\n\r\nexport const SET_CHART_DATA = \"SET_CHART_DATA\"\r\n\r\nexport const SET_AVERAGE_INDEX_OF_PERFORMANCE = \"SET_AVERAGE_INDEX_OF_PERFORMANCE\"\r\n\r\nexport const SET_NUM_HIGHLIGHTS = \"SET_NUM_HIGHLIGHTS\"\r\n\r\nexport const LOAD_IN_PREMADE_ENTRIES = \"LOAD_IN_PREMADE_ENTRIES\"\r\n\r\nexport const TOGGLE_BORDERS = \"TOGGLE_BORDERS\"","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const incrementScore = () => {\r\n    return {\r\n        type : ActionTypes.INCREMENT_SCORE\r\n    }\r\n}\r\n\r\nexport const pickANewHighlight = (exception) => {\r\n    return {\r\n        type : ActionTypes.PICK_A_NEW_HIGHLIGHT,\r\n        Exception : exception\r\n    }\r\n}\r\n\r\nexport const increaseFittsScore = (amount) => {\r\n    return {\r\n        type : ActionTypes.INCREASE_FITTS_SCORE,\r\n        Amount : amount\r\n    }\r\n}\r\n\r\nexport const updatePrevXYCoord = (x, y) => {\r\n    return {\r\n        type : ActionTypes.UPDATE_PREV_X_Y_COORD,\r\n        X : x,\r\n        Y : y,\r\n    }\r\n}\r\n\r\nexport const setTime = (time) => {\r\n    return {\r\n        type : ActionTypes.SET_TIME,\r\n        Time : time,\r\n    }\r\n}\r\n\r\nexport const endGame = () => {\r\n    return {\r\n        type : ActionTypes.END_GAME,\r\n    }\r\n}\r\n\r\nexport const resetGame = () => {\r\n    return {\r\n        type : ActionTypes.RESET_GAME\r\n    }\r\n}\r\n\r\nexport const setRegressionModel = (model) => {\r\n    return {\r\n        type : ActionTypes.SET_REGRESSION_MODEL,\r\n        Model : model\r\n    }\r\n}\r\n\r\nexport const setChartData = (data) => {\r\n    return {\r\n        type : ActionTypes.SET_CHART_DATA,\r\n        Data : data,\r\n    }\r\n}\r\n\r\nexport const setAvgIndexOfPerformance = (avg) => {\r\n    return {\r\n        type : ActionTypes.SET_AVERAGE_INDEX_OF_PERFORMANCE,\r\n        Avg : avg\r\n    }\r\n}\r\n\r\nexport const setNumHighlights = (num) => {\r\n    return {\r\n        type : ActionTypes.SET_NUM_HIGHLIGHTS,\r\n        Num : num\r\n    }\r\n}\r\n\r\nexport const toggleBorders = (bool) => {\r\n    return {\r\n        type : ActionTypes.TOGGLE_BORDERS,\r\n        Status : bool\r\n    }\r\n}\r\n\r\nexport const loadInPremadeEntries = () => {\r\n    return {\r\n        type : ActionTypes.LOAD_IN_PREMADE_ENTRIES\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { pickANewHighlight, incrementScore, updatePrevXYCoord, endGame } from '../redux/settingActions'\r\n\r\nclass Tile extends Component {\r\n    isHighlighted() {\r\n        return this.props.highlightedTiles.includes(this.props.id)\r\n    }\r\n\r\n    _handleClick(e) {\r\n        if(this.isHighlighted()) {\r\n            document.getElementById(\"tile_\"+this.props.id).innerHTML = \"\"\r\n            this.props.incrementScore()\r\n            this.props.updatePrevXYCoord(e.clientX, e.clientY)\r\n            this.props.pickANewHighlight(this.props.id)\r\n        } else {\r\n            this.props.endGame()\r\n        }\r\n    }\r\n\r\n    calculateID(el) {\r\n        // MAKE PREDICTION\r\n        // GET DISTANCE\r\n        var centerX = el.getBoundingClientRect().x + (el.getBoundingClientRect().width/2)\r\n        var centerY = el.getBoundingClientRect().y + (el.getBoundingClientRect().height/2)\r\n        var a = centerX - this.props.prevX\r\n        var b = centerY - this.props.prevY\r\n        var distance = Math.sqrt(a*a, b*b)\r\n        var id = Math.log((2*distance) / 100)\r\n        if (id < 0) {\r\n            id = 0;\r\n        }\r\n        var prediction = this.props.RegressionModel.predict(id).toFixed(0);\r\n        document.getElementById(\"tile_\"+this.props.id).innerHTML = prediction+\"ms\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tile\"\r\n            id={\"tile_\"+this.props.id}\r\n            ref={el=> {\r\n                if (this.isHighlighted()) {\r\n                    if (!el) {\r\n                        return;\r\n                    } else {\r\n                        if (this.props.RegressionModel != null) {\r\n                            this.calculateID(el)\r\n                        }\r\n                    }\r\n                }\r\n            }}\r\n            style={{backgroundColor : this.isHighlighted() ? \"black\" : \"white\", border : this.props.Borders ? \".5px solid gray\" : \"\"}} \r\n            onClick={(e) => this._handleClick(e)}>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        pickANewHighlight : (tileToBeReplaced) => {\r\n            dispatch(pickANewHighlight(tileToBeReplaced))\r\n        },\r\n        incrementScore : () => {\r\n            dispatch(incrementScore())\r\n        },\r\n        updatePrevXYCoord : (x,y) => {\r\n            dispatch(updatePrevXYCoord(x,y))\r\n        },\r\n        endGame : () => {\r\n            dispatch(endGame())\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        highlightedTiles : state.highlightedTiles,\r\n        RegressionModel : state.RegressionModel,\r\n        prevX : state.prevX,\r\n        prevY : state.prevY,\r\n        Borders : state.Borders\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tile)","import React, { Component } from 'react'\r\nimport Tile from './Tile'\r\nimport {Row, Col} from 'react-materialize'\r\nimport { connect } from 'react-redux'\r\nimport { resetGame } from '../redux/settingActions'\r\n\r\nclass Board extends Component {\r\n    componentDidMount() {\r\n        this.props.resetGame()\r\n    }\r\n\r\n    render() {\r\n        var i = 1;\r\n        return (\r\n            <div className=\"board\">\r\n                <Row>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                    <Col><Tile id={i++}/></Col>\r\n                </Row>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        resetGame : () => {\r\n            dispatch(resetGame())\r\n        },\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        board : state.Board\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { endGame, setTime } from '../redux/settingActions'\r\n\r\nclass Scoreboard extends Component {\r\n    countdown = () => {\r\n        if (this.props.time === 1) {\r\n            this.props.endGame()\r\n        }\r\n        if (this.props.score > 0) {\r\n            this.props.setTime(this.props.time-1)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.clicker = setInterval(this.countdown, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.clicker)\r\n    }\r\n\r\n    render() {\r\n        if (this.props.score === 0) {\r\n            return (\r\n                <div className=\"centerWithinMe\">\r\n                <div>Click a Tile to Start</div>\r\n                <div>You get 10 more seconds for every 10 tiles clicked</div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <div>Score: {this.props.score}</div>\r\n                    <div>Time: {this.props.time}</div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setTime : (time) => {\r\n            dispatch(setTime(time))\r\n        },\r\n        endGame : () => {\r\n            dispatch(endGame())\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        score : state.score,\r\n        time : state.time,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Scoreboard)","import SimpleLinearRegression from 'ml-regression-simple-linear'\r\n\r\nconst widthOfTarget = 100;\r\n\r\n/* Sometimes ID can be negative, count these as 0 */\r\nexport function getIndexOfDifficulty(clickEntry) {\r\n    var id = Math.log((2*clickEntry.distance)/widthOfTarget).toFixed(4)\r\n    if (id < 0) {\r\n        id = 0;\r\n    }\r\n    return id;\r\n}\r\n\r\nfunction getIndexOfPerformance(clickEntry) {\r\n    let id = getIndexOfDifficulty(clickEntry)\r\n    /* Convert the movement time into seconds for this calculation */\r\n    return (id / (clickEntry.time * .001))\r\n}\r\n\r\nexport function getAverageIndexOfPerformance(clickEntries) {\r\n    var sum = 0;\r\n    for (var i=0;i<clickEntries.length;i++) {\r\n        sum+=getIndexOfPerformance(clickEntries[i])\r\n    }\r\n    return (sum/clickEntries.length).toFixed(2)\r\n}\r\n\r\nexport function calculateMeanMovementPerId(clickEntries) {\r\n    var idMeanDict = {}\r\n    var countDict = {}\r\n\r\n    for (var i=0;i<clickEntries.length;i++) {\r\n        var clickEntry = clickEntries[i]\r\n        var idOfEntry = getIndexOfDifficulty(clickEntry)\r\n        if (idOfEntry in idMeanDict) {\r\n            idMeanDict[idOfEntry] += clickEntry.time\r\n            countDict[idOfEntry] += 1\r\n        } else {\r\n            idMeanDict[idOfEntry] = clickEntry.time\r\n            countDict[idOfEntry] = 1\r\n        }\r\n    }\r\n    Object.entries(idMeanDict).forEach(([key, value]) => {\r\n        idMeanDict[key] = Math.round(value / countDict[key])\r\n    });\r\n    return idMeanDict\r\n}\r\n\r\nexport function getChartReadyData(clickEntries) {\r\n    var idMeanDict = calculateMeanMovementPerId(clickEntries)\r\n    var regression = calculateLinearRegression(clickEntries)\r\n    var data = []\r\n    var keys = Object.keys(idMeanDict)\r\n    data.push([\"Index of Difficulty\", \"Movement Time\", \"Predicted Value\"])\r\n    for (var i=0;i<keys.length;i++) {\r\n        data.push([parseFloat(keys[i]), idMeanDict[keys[i]], regression.predict(parseFloat(keys[i]))])\r\n    }\r\n    return data;\r\n}\r\n\r\nexport function getArrayFormOfMeanMovementPerId(clickEntries) {\r\n    var idMeanDict = calculateMeanMovementPerId(clickEntries)\r\n    var data = []\r\n    var keys = Object.keys(idMeanDict)\r\n    data.push([\"Index of Difficulty\", \"Movement Time\"])\r\n    for (var i=0;i<keys.length;i++) {\r\n        data.push([parseFloat(keys[i]), idMeanDict[keys[i]]])\r\n    }\r\n    return data;\r\n}\r\n\r\nexport function calculateLinearRegression(clickEntries) {\r\n    var idMeanDict = calculateMeanMovementPerId(clickEntries)\r\n    var x = []\r\n    var y = []\r\n    var keys = Object.keys(idMeanDict)\r\n    for (var i=0;i<keys.length;i++) {\r\n        x.push(parseFloat(keys[i]))\r\n        y.push(idMeanDict[keys[i]])\r\n    }\r\n    return new SimpleLinearRegression(x, y)\r\n}","import React, { Component } from 'react'\r\nimport { Table } from 'react-materialize'\r\nimport { connect } from 'react-redux'\r\nimport * as MathUtilities from '../math/MathUtilities'\r\n\r\nclass FittsDisplay extends Component {\r\n    render() {\r\n        return (\r\n            <Table className={this.props.fullDisplay ? \"scrollable\" : \"\"}>\r\n            <thead>\r\n                <tr>\r\n                <th data-field=\"distance\">\r\n                    Distance(px)\r\n                </th>\r\n                <th data-field=\"movement-time\">\r\n                    Movement Time(ms)\r\n                </th>\r\n                <th data-field=\"predicted-time\">\r\n                    Predicted Time(ms)\r\n                </th>\r\n                <th data-field=\"difference\">\r\n                    Difference (ms)\r\n                </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {Object.keys(this.props.fullDisplay ? this.props.totalClickEntries : this.props.currentClickEntries).map((key) => {\r\n                    var entry = this.props.fullDisplay ? this.props.totalClickEntries[key] : this.props.currentClickEntries[key];\r\n                    var predictedTime = this.props.regressionModel != null ? this.props.regressionModel.predict(parseFloat(MathUtilities.getIndexOfDifficulty(entry))).toFixed(0) : null\r\n                    return(\r\n                        <tr key={key}>\r\n                            <td>\r\n                                {entry.distance}\r\n                            </td>\r\n                            <td>\r\n                                {entry.time}\r\n                            </td>\r\n                            <td>\r\n                                {predictedTime == null ? \"N/A\" : predictedTime}\r\n                            </td>\r\n                            <td>\r\n                                {predictedTime == null ? \"N/A\" : entry.time - predictedTime}\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        currentClickEntries : state.currentClickEntries,\r\n        totalClickEntries : state.totalClickEntries,\r\n        regressionModel : state.RegressionModel\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FittsDisplay)","import React, { Component } from 'react'\r\nimport { Chart } from 'react-google-charts'\r\nimport { connect } from 'react-redux'\r\n\r\nclass StatChart extends Component {\r\n    render() {\r\n        console.log(\"STAT CHART RENDERED\")\r\n        return (\r\n            <Chart\r\n              width={'1100px'}\r\n              height={'400px'}\r\n              chartType=\"ComboChart\"\r\n              loader={<div>Loading Chart</div>}\r\n              data={this.props.ChartData}\r\n              options={{\r\n                title: 'Fitts Actual vs. Expected Value',\r\n                hAxis: { title: 'Index of Difficulty'},\r\n                vAxis: { title: 'Movement Time'},\r\n                legend: '',\r\n                seriesType: 'scatter',\r\n                series: { 1: {type : 'line'}},\r\n              }}\r\n          />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        ChartData : state.ChartData\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StatChart)","import React, { Component } from 'react';\r\nimport { Button } from 'react-materialize';\r\nimport { loadInPremadeEntries, resetGame, setAvgIndexOfPerformance, setChartData, setRegressionModel } from '../redux/settingActions'\r\nimport { connect } from 'react-redux'\r\nimport FittsDisplay from './FittsDisplay';\r\nimport * as MathUtilities from '../math/MathUtilities'\r\nimport StatChart from './StatChart';\r\n\r\n\r\nclass FittsReport extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            needsRefresh : false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateData()\r\n    }\r\n\r\n    demandRefresh() {\r\n        this.setState({\r\n            needsRefresh : true,\r\n        })\r\n    }\r\n\r\n    signalRefreshed() {\r\n        this.setState({\r\n            needsRefresh : false,\r\n        })\r\n    }\r\n\r\n    updateData() {\r\n        this.props.setRegressionModel(MathUtilities.calculateLinearRegression(this.props.totalClickEntries))\r\n        this.props.setChartData(MathUtilities.getChartReadyData(this.props.totalClickEntries))\r\n        this.props.setAvgIndexOfPerformance(MathUtilities.getAverageIndexOfPerformance(this.props.totalClickEntries))\r\n    }\r\n    \r\n\r\n    render() {\r\n        // For saving entries \r\n        //console.log(JSON.stringify(this.props.totalClickEntries))\r\n        if (this.state.needsRefresh) {\r\n            this.updateData();\r\n            this.signalRefreshed()\r\n        }\r\n        if (this.props.totalClickEntries.length === 0) {\r\n            return (\r\n                <div className=\"centerWithinMe\">            \r\n                    <h3>There are no entries to display stats for!</h3>\r\n                    <Button onClick={(e)=> {\r\n                        this.props.resetGame()\r\n                    }}>Try again</Button>\r\n                </div>\r\n            )\r\n\r\n        } else {\r\n            return (\r\n                <div className=\"centerWithinMe\">\r\n                    <h3>Session Report</h3>\r\n                    <h5 className=\"stylish-heading centerWithinMe\">Application of Fitts' Law</h5>\r\n                    <p className=\"desc\">According to Fitts' Law, the time it takes to move your cursor from one tile to another is a function of the distance between them.\r\n                    Using the distance and the fixed width of the tiles, we can calculate the ID (Index of Difficulty, ID=log(2D/W)) between each pair of tiles. We can use \r\n                    linear regression to build a model to predict the time needed to click a destination tile. Your subsequent rounds will have the current model's prediction. \r\n                    Play more rounds to feed the model so it can make more accurate predictions!\r\n                    </p>\r\n                    <h5 className=\"stylish-heading\">Performance Graph</h5>\r\n                    <StatChart/>\r\n                    <div>\r\n                    <h5 className=\"stylish-heading\">Current Regression Model</h5>\r\n                    <p>{this.props.RegressionModel == null ? \"N/A\" : this.props.RegressionModel.toString()}</p>\r\n                    <h5 className=\"stylish-heading\">Average Index of Performance (Throughput)</h5>\r\n                    <p>{this.props.avgIP} bits/second</p>\r\n                    </div>\r\n                    <h5 className=\"stylish-heading\">Input Entries (size: {this.props.totalClickEntries.length})</h5>\r\n                    <div><FittsDisplay fullDisplay={true}/></div>\r\n                    <Button onClick={(e)=> {\r\n                        this.props.loadInPremadeEntries()\r\n                        this.demandRefresh()\r\n                    }}>Load Premade Data</Button>\r\n                    <h5 className=\"stylish-heading\">Score</h5>\r\n                    <p>{this.props.score}</p>\r\n                    <Button onClick={(e)=>this.props.resetGame()}>Try again</Button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        resetGame : () => {\r\n            dispatch(resetGame())\r\n        },\r\n        setRegressionModel : (model) => {\r\n            dispatch(setRegressionModel(model))\r\n        },\r\n        setChartData : (data) => {\r\n            dispatch(setChartData(data))\r\n        },\r\n        setAvgIndexOfPerformance : (avg) => {\r\n            dispatch(setAvgIndexOfPerformance(avg))\r\n        },\r\n        loadInPremadeEntries : () => {\r\n            dispatch(loadInPremadeEntries())\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        totalClickEntries : state.totalClickEntries,\r\n        avgIP : state.AvgIP,\r\n        RegressionModel : state.RegressionModel,\r\n        score : state.score,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FittsReport)","import React, { Component } from 'react'\r\nimport Header from './Header'\r\nimport Board from './Board'\r\nimport Scoreboard from './Scoreboard'\r\nimport FittsReport from './FittsReport'\r\nimport { connect } from 'react-redux'\r\nimport { Switch } from 'react-materialize'\r\nimport { toggleBorders } from '../redux/settingActions'\r\n\r\n\r\nclass AppContainer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.GameOver ? \r\n                <div className=\"full-container\">\r\n                    <FittsReport/>\r\n                </div>\r\n                 : \r\n            <div className=\"full-container\"> \r\n                 <div className=\"primary-container\">\r\n                    <Header/>\r\n                    <Switch\r\n                        id=\"Switch-11\"\r\n                        offLabel=\"Borders Off\"\r\n                        onChange={(e) => this.props.toggleBorders(e.target.checked)}\r\n                        onLabel=\"Borders On\"\r\n                        checked={this.props.Borders}\r\n                    />\r\n                    <Board/>\r\n                    <Scoreboard/>\r\n                 </div>\r\n             </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleBorders : (bool) => {\r\n            dispatch(toggleBorders(bool))\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        GameOver : state.GameOver,\r\n        Borders : state.Borders,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer)","import './css/App.css';\r\nimport AppContainer from './components/AppContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <AppContainer/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default class ClickEntry {\r\n    constructor(distance, time) {\r\n        this.distance = distance\r\n        this.time = time\r\n    }\r\n}","import * as ActionTypes from './ActionTypes'\r\nimport ClickEntry from '../classes/ClickEntry'\r\nimport PremadeEntries from '../data/PremadeEntries.json'\r\n\r\nconst timeIncrement = 10\r\nconst clicksBeforeIncrement = 10\r\nconst numTiles = 40\r\n\r\n/* Initial State */\r\nconst initState = {\r\n  score : 0,\r\n\r\n  prevX : -1,\r\n\r\n  prevY : -1,\r\n\r\n  prevTimeStamp : -1,\r\n\r\n  fittsScore : 0,\r\n\r\n  totalClickEntries : [],\r\n\r\n  currentClickEntries : [],\r\n\r\n  highlightedTiles : [],\r\n\r\n  AvgIP : 0,\r\n\r\n  time : timeIncrement,\r\n\r\n  RegressionModel : null,\r\n\r\n  NumHighlights : 1,\r\n\r\n  ChartData : [],\r\n\r\n  GameOver : false,\r\n\r\n  Borders : true,\r\n}\r\n\r\nconst pickANewTile = (X, highlightedTiles) => {\r\n  var randomNumber = Math.floor(Math.random() * numTiles) + 1\r\n  while (randomNumber === X || highlightedTiles.includes(randomNumber)) {\r\n    randomNumber = Math.floor(Math.random() * numTiles) + 1\r\n  }\r\n  return randomNumber\r\n}\r\n\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.INCREMENT_SCORE:\r\n      if (state.score === 0) {\r\n        return {\r\n          ...state,\r\n          score : state.score + 1,\r\n          currentClickEntries : []\r\n        }\r\n      }\r\n      else if ((state.score + 1) % clicksBeforeIncrement === 0) {\r\n        return {\r\n          ...state,\r\n          score : state.score + 1,\r\n          time : state.time + timeIncrement,\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          score : state.score + 1,\r\n        }\r\n      }\r\n\r\n    case ActionTypes.PICK_A_NEW_HIGHLIGHT:\r\n      var newHighlights = [...state.highlightedTiles.slice(0, state.highlightedTiles.indexOf(action.Exception)),\r\n        ...state.highlightedTiles.slice(state.highlightedTiles.indexOf(action.Exception)+1)]\r\n      return {\r\n        ...state,\r\n        highlightedTiles : [...newHighlights, pickANewTile(action.Exception, newHighlights)]\r\n      }\r\n    case ActionTypes.INCREASE_FITTS_SCORE:\r\n      return {\r\n        ...state,\r\n        fittsScore : state.fittsScore + action.Amount\r\n      }\r\n    case ActionTypes.UPDATE_PREV_X_Y_COORD:\r\n      /**  Need conditional in event of first click */\r\n      var currentTime = Date.now()\r\n      if (state.prevTimeStamp !== -1) {\r\n        var timeDiff = currentTime - state.prevTimeStamp\r\n        var a = action.X - state.prevX\r\n        var b = action.Y - state.prevY\r\n        var distance = Math.sqrt(a*a, b*b)\r\n        return {\r\n          ...state,\r\n          prevTimeStamp : currentTime,\r\n          currentClickEntries : [...state.currentClickEntries, new ClickEntry(distance, timeDiff)],\r\n          prevX : action.X,\r\n          prevY : action.Y,\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          prevTimeStamp : currentTime,\r\n          prevX : action.X,\r\n          prevY : action.Y,\r\n        }\r\n      }\r\n    case ActionTypes.SET_AVERAGE_INDEX_OF_PERFORMANCE:\r\n      return {\r\n        ...state,\r\n        AvgIP : action.Avg\r\n      }\r\n    case ActionTypes.SET_TIME:\r\n      return {\r\n        ...state,\r\n        time : action.Time\r\n      }\r\n    case ActionTypes.END_GAME:\r\n      return {\r\n        ...state,\r\n        GameOver : true,\r\n        totalClickEntries : [...state.totalClickEntries, ...state.currentClickEntries]\r\n      }\r\n    case ActionTypes.RESET_GAME:\r\n      var newHighlightedTiles = [];\r\n      for (var i=0;i<state.NumHighlights;i++) {\r\n        newHighlightedTiles.push(pickANewTile(-1, state.highlightedTiles))\r\n      }\r\n      return {\r\n        ...initState,\r\n        highlightedTiles : newHighlightedTiles,\r\n        totalClickEntries : state.totalClickEntries,\r\n          /* Preserve the regression model */\r\n        RegressionModel : state.RegressionModel,\r\n\r\n      }\r\n    case ActionTypes.SET_REGRESSION_MODEL:\r\n      return {\r\n        ...state,\r\n        RegressionModel : action.Model\r\n      }\r\n    case ActionTypes.SET_CHART_DATA:\r\n      return {\r\n        ...state,\r\n        ChartData : action.Data\r\n      }\r\n    case ActionTypes.SET_NUM_HIGHLIGHTS:\r\n      return {\r\n        ...state,\r\n        NumHighlights : action.Num\r\n      }\r\n    case ActionTypes.LOAD_IN_PREMADE_ENTRIES:\r\n      var newEntries = []\r\n      for (var j=0; j<PremadeEntries.entries.length;j++) {\r\n        newEntries.push(new ClickEntry(PremadeEntries.entries[j].distance, PremadeEntries.entries[j].time))\r\n      }\r\n      return {\r\n        ...state,\r\n        totalClickEntries : [...newEntries, ...state.totalClickEntries]\r\n      }\r\n    case ActionTypes.TOGGLE_BORDERS:\r\n      return {\r\n        ...state,\r\n        Borders : action.Status,\r\n      }\r\n    default:\r\n      return state;\r\n  };\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\n\r\n\r\nexport default createStore(rootReducer, composeWithDevTools());\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'materialize-css';\nimport { Provider } from \"react-redux\";\nimport store from './redux/store'\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}